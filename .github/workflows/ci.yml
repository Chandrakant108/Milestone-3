name: üöÄ Automation Framework CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  DB_HOST: localhost
  DB_PORT: 3306
  DB_NAME: automation_tests
  DB_USER: root
  DB_PASS: Ck@709136
  CI: true

jobs:
  api-tests:
    name: üß™ API Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      mysql:
        image: mysql:8.0
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: ${{ env.DB_PASS }}
          MYSQL_DATABASE: ${{ env.DB_NAME }}
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 23

      - name: üì¶ Cache Maven
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: üî® Build Project
        run: mvn clean install -DskipTests

      - name: ‚ñ∂Ô∏è Run API Tests (Parallel)
        run: mvn test -Dtest=**/*JsonPlaceholderTests.java -DthreadCount=10 -Ddataproviderthreadcount=10

  ui-tests:
    name: üåê UI Tests
    runs-on: ubuntu-latest
    timeout-minutes: 40
    # ‚õîÔ∏è REMOVED `needs: api-tests` to run both jobs in parallel

    services:
      mysql:
        image: mysql:8.0
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: ${{ env.DB_PASS }}
          MYSQL_DATABASE: ${{ env.DB_NAME }}
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 23

      - name: üì¶ Cache Maven
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: üî® Build Project
        run: mvn clean install -DskipTests

      - name: üñ•Ô∏è Install Chrome & Matching ChromeDriver
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip xvfb curl
          wget -q https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo apt install -y ./google-chrome-stable_current_amd64.deb

          CHROME_VERSION=$(google-chrome --version | awk '{print $3}' | cut -d '.' -f1)
          echo "Detected Chrome major version: $CHROME_VERSION"

          CHROMEDRIVER_VERSION=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_${CHROME_VERSION}")
          echo "Matching ChromeDriver version: $CHROMEDRIVER_VERSION"

          wget -q "https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/${CHROMEDRIVER_VERSION}/linux64/chromedriver-linux64.zip"
          unzip -o chromedriver-linux64.zip
          sudo mv chromedriver-linux64/chromedriver /usr/bin/chromedriver
          sudo chmod +x /usr/bin/chromedriver

          google-chrome --version
          chromedriver --version

      - name: ‚ñ∂Ô∏è Run UI Tests (Headless & Parallel)
        run: |
          export DISPLAY=:99
          Xvfb :99 -screen 0 1920x1080x24 &
          mvn test -Dtest=**/*BlazeDemoTests.java \
            -Dchrome.binary=/usr/bin/google-chrome \
            -Dwebdriver.chrome.driver=/usr/bin/chromedriver \
            -DthreadCount=10 -Ddataproviderthreadcount=10

      - name: üì¶ Upload UI Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: artifacts/**/*

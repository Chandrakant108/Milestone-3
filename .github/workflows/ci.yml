name: 🚀 Automation Framework CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  DB_HOST: localhost
  DB_PORT: 3306
  DB_NAME: automation_tests
  DB_USER: root
  DB_PASS: Ck@709136  # ⚠️ Replace with GitHub Secret later
  CI: true  # ✅ Enables headless mode in BaseTest.java

jobs:
  # =========================
  # Job 1: API Tests
  # =========================
  api-tests:
    name: 🧪 API Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      mysql:
        image: mysql:8.0
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: ${{ env.DB_PASS }}
          MYSQL_DATABASE: ${{ env.DB_NAME }}
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    steps:
      - name: 📂 Checkout Code
        uses: actions/checkout@v3

      - name: ☕ Set up JDK 23
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 23

      - name: 💾 Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: 🏗️ Build Project
        run: mvn clean install -DskipTests

      - name: 🛠️ Initialize MySQL Tables
        run: |
          sudo apt-get install -y mysql-client
          echo "Waiting for MySQL to be ready..."
          for i in {1..30}; do
            if mysqladmin ping -h 127.0.0.1 -u root -p${{ env.DB_PASS }} --silent; then
              echo "✅ MySQL is ready!"
              break
            fi
            sleep 2
          done
          echo "📊 Initializing DB schema..."
          mysql -h 127.0.0.1 -P 3306 -u root -p${{ env.DB_PASS }} ${{ env.DB_NAME }} < src/main/resources/sql/db-init.sql

      - name: ▶️ Run API Tests
        run: mvn test -Dtest=**/*JsonPlaceholderTests.java

      - name: 📦 Upload API Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: api-test-reports
          path: |
            artifacts/html/**/*
            artifacts/csv/**/*
            artifacts/excel/**/*
            artifacts/j-unit/**/*
            artifacts/logs/**/*

  # =========================
  # Job 2: UI Tests
  # =========================
  ui-tests:
    name: 🌐 UI Tests
    runs-on: ubuntu-latest
    needs: api-tests
    timeout-minutes: 40

    services:
      mysql:
        image: mysql:8.0
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: ${{ env.DB_PASS }}
          MYSQL_DATABASE: ${{ env.DB_NAME }}
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    steps:
      - name: 📂 Checkout Code
        uses: actions/checkout@v3

      - name: ☕ Set up JDK 23
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 23

      - name: 💾 Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: 🏗️ Build Project
        run: mvn clean install -DskipTests

      - name: 🛠️ Initialize MySQL Tables
        run: |
          sudo apt-get install -y mysql-client
          echo "Waiting for MySQL to be ready..."
          for i in {1..30}; do
            if mysqladmin ping -h 127.0.0.1 -u root -p${{ env.DB_PASS }} --silent; then
              echo "✅ MySQL is ready!"
              break
            fi
            sleep 2
          done
          echo "📊 Initializing DB schema..."
          mysql -h 127.0.0.1 -P 3306 -u root -p${{ env.DB_PASS }} ${{ env.DB_NAME }} < src/main/resources/sql/db-init.sql

      - name: 🖥️ Install Chrome & ChromeDriver
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip xvfb libxi6 libgconf-2-4 default-jdk
          # Install Google Chrome
          wget -q -O google-chrome.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo dpkg -i google-chrome.deb || sudo apt-get -f install -y
          # Install matching ChromeDriver
          CHROME_VERSION=$(google-chrome --version | grep -oP '\d+\.\d+\.\d+')
          CHROMEDRIVER_VERSION=$(wget -qO- https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_VERSION%.*})
          wget -q https://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip
          unzip chromedriver_linux64.zip
          sudo mv chromedriver /usr/bin/chromedriver
          sudo chmod +x /usr/bin/chromedriver
          echo "✅ Google Chrome installed at: $(which google-chrome)"
          echo "✅ ChromeDriver installed at: /usr/bin/chromedriver"

      - name: ▶️ Run UI Tests
        run: |
          export DISPLAY=:99
          mvn test -Dtest=**/*BlazeDemoTests.java \
            -Dchrome.binary=$(which google-chrome) \
            -Dwebdriver.chrome.driver=/usr/bin/chromedriver

      - name: 📦 Upload UI Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ui-test-reports
          path: |
            artifacts/html/**/*
            artifacts/csv/**/*
            artifacts/excel/**/*
            artifacts/j-unit/**/*
            artifacts/screenshots/**/*
            artifacts/logs/**/*
